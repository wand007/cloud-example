server:
  port: 21007
  undertow:
    # 设置IO线程数, 它主要执行非阻塞的任务,它们会负责多个连接, 默认设置每个CPU核心一个线程
    io-threads: 4
    # 阻塞任务线程池
    worker-threads: 50
    buffer-size: 512
    direct-buffers: true

spring:
  application:
    name: example-client
  main:
    allow-bean-definition-overriding: true
  servlet:
    # 文件上传
    multipart:
      # 上传文件的临时目录 （linux的默认临时目录定时会被删除会导致上传失败，尽量指定临时目录）
      location: /data/tmp
      # 是否支持批量上传   (默认值 true)
      enabled: true
      # 上传文件最大为 1M （默认值 1M 根据自身业务自行控制即可）
      max-file-size: 1MB
      # 设置总上传的数据大小 10M（默认值10M 根据自身业务自行控制即可）
      max-request-size: 1MB
      # 文件大小阈值，当大于这个阈值时将写入到磁盘，否则存在内存中，（默认值0 一般情况下不用特意修改）
      file-size-threshold: 0

  # 数据库配置
  datasource:
    url: jdbc:mysql://127.0.0.1:3306/db_storage?useSSL=false&serverTimezone=UTC
    username: root
    password: Admin1234
    driverClassName: com.mysql.jdbc.Driver
    type: com.alibaba.druid.pool.DruidDataSource
    # 初始化大小，最小，最大 获取连接等待超时的时间
    initialSize: 5
    minIdle: 5
    maxActive: 20
    maxWait: 60000
    # 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
    timeBetweenEvictionRunsMillis: 60000
    minEvictableIdleTimeMillis: 300000
    validationQuery: SELECT 1 FROM DUAL
    testWhileIdle: true
    testOnBorrow: false
    testOnReturn: false
    # 打开PSCache，并且指定每个连接上PSCache的大小
    poolPreparedStatements: true
    maxPoolPreparedStatementPerConnectionSize: 20
    # 配置监控统计拦截的filters，去掉后监控界面sql无法统计，'wall'用于防火墙
    filters: stat,wall,log4j
    # 通过connectProperties属性来打开mergeSql功能；慢SQL记录
    connectionProperties: druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000
    useGlobalDataSourceStat: true
  #  spring-data-jpa 配置
  jpa:
    database: MYSQL
    show-sql: true
    open-in-view: false
    properties:
      hibernate:
        hbm2ddl:
          auto: update
        dialect: org.hibernate.dialect.MySQL5Dialect
  jackson:
    timeZone: GMT+8
    dateFormat: yyyy-MM-dd HH:mm:ss
eureka:
  instance:
    prefer-ip-address: true
    # 设置心跳的时间间隔（默认是30秒）
    lease-renewal-interval-in-seconds: 3
    # 如果现在超过了5秒的间隔
    lease-expiration-duration-in-seconds: 9
  client:
    register-with-eureka: true
    fetch-registry: true
    # #CacherefreshThread线程的调度频率，eureka默认30秒刷新一次缓存
    registry-fetch-interval-seconds: 10
    #刷新Eureka Server地址的时间间隔
    eureka-service-url-poll-interval-seconds: 300
    #instanceInfoReplication将实例信息变更同步到Eureka Server的初始延时时间，默认40秒
    initial-instance-info-replication-interval-seconds: 40
    #InstanceInfoReplication将实例信息变更同步到Eureka Server的时间间隔
    instance-info-replication-interval-seconds: 30
    healthcheck:
      enabled: true
    serviceUrl:
      defaultZone: http://127.0.0.1:8761/eureka/

jpa:
  async:
    threadPool:
      corePoolSize: 8 # 核心线程数
      maximumPoolSize: 20  # 线程池中允许的最大线程数
      keepAliveTime: 10 # 线程空闲时间
      queueCapacity: 5000 # 任务队列容量
  completable-future:
    threadPool:
      corePoolSize: 8 # 核心线程数
      maximumPoolSize: 20  # 线程池中允许的最大线程数
      keepAliveTime: 10 # 线程空闲时间
      queueCapacity: 5000 # 任务队列容量